<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ JBoss, Home of Professional Open Source
  ~ Copyright 2012 Red Hat Inc. and/or its affiliates and other contributors
  ~ as indicated by the @authors tag. All rights reserved.
  ~ See the copyright.txt in the distribution for a
  ~ full listing of individual contributors.
  ~
  ~ This copyrighted material is made available to anyone wishing to use,
  ~ modify, copy, or redistribute it subject to the terms and conditions
  ~ of the GNU Lesser General Public License, v. 2.1.
  ~ This program is distributed in the hope that it will be useful, but WITHOUT A
  ~ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  ~ PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  ~ You should have received a copy of the GNU Lesser General Public License,
  ~ v.2.1 along with this distribution; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  ~ MA  02110-1301, USA.
  -->
<!--
    @author Guillaume Scheibel <guillaume.scheibel@gmail.com>
-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../ogm.ent">
%BOOK_ENTITIES;
]>
<section>
    <title>MongoDB</title>

    <section>
        <title>Configuring MongoDB</title>

        <para>
            This implementation is based upon the MongoDB Java driver, currently the supported version is
            &mongodbVersion;.
        </para>
        <para>To use Hibernate OGM with MongoDB there are the properties to
            configure:</para>

        <table>
            <title>MongoDB datastore configuration properties</title>
            <tgroup cols="3">
                <colspec colwidth="120px" />
                <colspec colwidth="350px" />
                <colspec colwidth="200px" />
                <thead>
                    <row>
                        <entry>Property</entry>
                        <entry>Description</entry>
                        <entry>Default value</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>hibernate.ogm.datastore.provider</entry>
                        <entry>This property is mandatory to use the MongoDB datastore providers.</entry>
                        <entry>mongodb</entry>
                    </row>
                    <row>
                        <entry>hibernate.ogm.mongodb.host</entry>
                        <entry>The hostname of the mongodb instance.</entry>
                        <entry>127.0.0.1</entry>
                    </row>
                    <row>
                        <entry>hibernate.ogm.mongodb.port</entry>
                        <entry>The port used by the mongodb instance.</entry>
                        <entry>27017</entry>
                    </row>
                    <row>
                        <entry>hibernate.ogm.mongodb.database</entry>
                        <entry>The database to connect to.</entry>
                        <entry>No default value.</entry>
                    </row>
                    <row>
                        <entry>hibernate.ogm.mongodb.username</entry>
                        <entry>The username to use when the MongoDB server requires authentication.</entry>
                        <entry>No default value.</entry>
                    </row>
                    <row>
                        <entry>hibernate.ogm.mongodb.password</entry>
                        <entry>
                            The password to use when the MongoDB server requires authentication.
                            This property is ignored if the username isn't specified.
                        </entry>
                        <entry>No default value.</entry>
                    </row>
                    <row>
                        <entry>hibernate.ogm.mongodb.safe</entry>
                        <entry>
                            It defines the safe mode of the MongoDB driver. When set to <literal>false</literal>, the
                            driver does not wait for the write operation to be applied before returning.
                            This could lead to loss of writes. When set to <literal>true</literal> which means
                            the driver will wait for the operation to succeed before returning.
                            Note that this is slower than the unsafe mode.
                        </entry>
                        <entry>true</entry>
                    </row>
                    <row>
                        <entry>hibernate.ogm.mongodb.connection_timeout</entry>
                        <entry>
                            It defines the timeout used by the driver when the connection to the MongoDB instance is
                            made. This configuration is expressed in milliseconds
                         </entry>
                        <entry>5000</entry>
                    </row>
                    <row>
                        <entry>hibernate.ogm.mongodb.associations.store</entry>
                        <entry>
                            It defines the way OGM stores association information. There are three way to store
                            association information.
                            <literal>GLOBAL_COLLECTION</literal> stores the association information in a unique MongoDB
                            collection for all associations.
                            <literal>COLLECTION</literal> stores the association in a dedicated MongoDB collection
                            per association
                            <literal>IN_ENTITY</literal> stores association information from within the entity.
                        </entry>
                    </row>
            </tbody>
        </tgroup>
        </table>

        <note>
            <para>The general policy in Hibernate OGM is to not go against the
                underlying NoSQL store. We have made an exception for MongoDB's write
                concern default setting - which is unsafe out of the box. Based on the
                typical use case of Hibernate OGM (domain models) and based on the
                production feedback we have received, we do consider MongoDB's default
                value to be dangerous.</para>
        </note>
    </section>


    <section>
        <title>Storage principles</title>

        <section>
            <title>Entities</title>
            <para>
                Entities are stored as MongoDB documents and not as BLOBs which means each entity property will be
                translated into a document field. You can use the name property of @Table and @Column annotation and so
                rename the collections and the document's field.
                Document oriented NoSQL solution are powerful
            </para>
            <section>
                <title>Identifiers</title>
                <para>
                    The <literal>_id</literal> field of a MongoDB document is directly used to store the ID mapped
                    in the entities. That means you can use simple IDs (no matter the Java type used) as well as
                    Embedded ids. Embedded ids are stored as embedded document into the <literal>_id</literal> field.
                    The dialect is in charge to map the <literal>@Id</literal> entity property with the
                    <literal>_id</literal> document field so you can name the entity id like you want it will always be
                    stored into <literal>_id</literal> and so you can benefit from the MongoDB index on _id fields.
                    For instance if you have an entity like:
                </para>

                <example>
                    <title>Example of an entity using Embedded id</title>
                    <programlisting role="JAVA" language="JAVA">
@Entity
public class News {
    @EmbeddedId
    private NewsID newsId;
    //getters, setters ...
}

@Embeddable
public class NewsID implements Serializable {
    private String title;
    private String author;
    //getters, setters ...
}
                    </programlisting>
                </example>

                <example>
                    <title>Representation of an embedded id</title>
                    <programlisting role="JSON" language="JSON">
{
_id :{
    title: "How does Hibernate OGM MongoDB work?",
    author: "Guillaume"
    }
}
                    </programlisting>
                </example>
            </section>
        </section>
    </section>
</section>